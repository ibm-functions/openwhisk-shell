/*
 * Copyright 2017 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const debug = require('debug')('wskflow')
debug('loading')

const $ = require('jquery'),
      compositionTofsm = require('./lib/composition2fsm')
      fsm2graph = require('./lib/fsm2graph.js')

debug('finished loading modules')

module.exports = (commandTree, prequire) => {
    return {
        /**
         * Export a programmatic API to visualize a Composition
         *
         * [required] fsm: composer-generated JSON. container: DOM selector 
         * [optional] w & h: canvas width and height. data: activation data
         *
         */
        visualize: (passedFsm, container, w, h, activations) => {
            debug('visualize');

            if(passedFsm == undefined){
                debug("fsm is empty. return.");
                return;
            }
            else if(activations && typeof passedFsm == 'string' && (passedFsm == 'deleted' || passedFsm.indexOf('outdated') == 0)){
                let msg;
                if(passedFsm == 'deleted'){
                    msg = 'The flow visualization cannot be created because the app has been deleted. '
                }
                else{
                    let v = passedFsm.split(' ');
                    msg = `The flow visualization cannot be created because this session was generated by an older version of the app (session version: ${v[2]}, current app version: ${v[1]}). `;                    
                }
                msg += '<br/><br/>Visit the Trace tab to view a list of activations caused by the session.';
                msg = '<div style="margin: 25px">'+msg+'</div>'
                $(container).html(msg);
                return;

            }
            else if(passedFsm.composition === undefined){                
                console.error("[wskflow] fsm is in a wrong format. return.");                
                return;
            }

            var fsm = compositionTofsm(JSON.parse(JSON.stringify(passedFsm)));
            debug('FSM', fsm);

            if(activations){   
                // showing runtime activations
                debug('activations', activations);
                //fsm2graph(fsm, container, w, h, data.wskflowData.slice(0, data.wskflowData.length-1));   
                //fsm2graph(fsm, container, w, h, activations);   
            }
            else{       
                // showing the control flow
                // collect all action name, send a get request for each             
                let getPromises = [], actionName = [], action2State = {};
                Object.keys(fsm.States).forEach(id => {
                    const state = fsm.States[id]

                    if(state.type === "action" && state.name){
                        
                        actionName.push(state.name);
                        getPromises.push(repl.qexec(`wsk action get "${state.name}"`));

                        if(action2State[state.name] === undefined)
                            action2State[state.name] = [];
                        action2State[state.name].push(state.id);
                    }
                });
                //fsm2graph(fsm, container, w, h);

                Promise.all(getPromises.map(p => p.catch(e => e)))
                    .then(result => {                        
                        result.forEach((r, index) => {
                            if(r.type === "actions" && r.name){
                                debug(`action ${r.name} is deployed`);
                            }
                            else{
                                debug(`action ${actionName[index]} is not deployed`);
                                if(action2State[actionName[index]]){
                                    action2State[actionName[index]].forEach(s => {
                                        let t = setInterval(e => {
                                            if($('#'+s).length > 0){
                                                clearInterval(t);
                                                $('#'+s).attr('data-deployed', 'not-deployed');
                                                $('#'+s).find('rect').css('fill', 'lightgrey');
                                            }
                                        }, 20);
                                    });
                                   
                                }
                            }
                        });
                        //fsm2graph(fsm, container, w, h);
                    })
                    .catch(e => {
                        console.log('[wskflow] action get fetching error: ', e);
                       //fsm2graph(fsm, container, w, h);
                    });        
            }

           
            let width, height;
            if($('body').hasClass('sidecar-full-screen')){   
                width = $(window).width()-2;               
            }
            else{   // not full screen
                width = $(window).width()*0.6-2;                 
            }
            height = $('#sidecar').height()-$('.sidecar-header').height()-$('.sidecar-bottom-stripe').height()-2;

            fsm2graph(fsm, container, width, height, activations); 
           
            return true;
        }
    }
}

debug('finished loading')
